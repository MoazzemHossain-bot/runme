syntax = "proto3";

package runme.config.v1alpha1;

import "buf/validate/validate.proto";

option go_package = "github.com/stateful/runme/internal/gen/proto/go/runme/config/v1alpha1;configv1alpha1";

// Config describes the configuration of the runme tools, including CLI, server, and clients like VS Code extension.
message Config {
  // source is a source of Markdown files to look into.
  oneof source {
    option (buf.validate.oneof).required = true;

    // project indicates a dir-based source typically including multiple Markdown files.
    Project project = 1;

    // filename indicates a single Markdown file.
    string filename = 2;
  }

  // env is the environment variables configuration.
  Env env = 3;

  // filters is a list of filters to apply.
  // Filters can be applied to documents or
  // individual code blocks.
  repeated Filter filters = 5;

  // log contains the log configuration.
  Log log = 7;

  Server server = 8;

  message Project {
    // dir is the directory to look for Markdown files.
    string dir = 1;

    // find_repo_upward indicates whether to find the nearest Git repository upward.
    // This is useful to, for example, recognize .gitignore files.
    bool find_repo_upward = 2;

    // ignore_paths is a list of paths to ignore relative to dir.
    repeated string ignore_paths = 3 [json_name = "ignore"];

    // disable_gitignore indicates whether to disable the .gitignore file.
    bool disable_gitignore = 4;
  }

  message Filter {
    // type is the type of the filter.
    FilterType type = 1 [(buf.validate.field).enum.defined_only = true];

    // condition is the filter program to execute for each document or block,
    // depending on the filter type.
    //
    // The condition should be a valid Expr expression and it should return a boolean value.
    // You can read more about the Expr syntax on https://expr-lang.org/.
    string condition = 2 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 1024
    ];
  }

  enum FilterType {
    FILTER_TYPE_UNSPECIFIED = 0;
    FILTER_TYPE_BLOCK = 1;
    FILTER_TYPE_DOCUMENT = 2;
  }

  message Env {
    // use_system_env indicates whether to use the system environment variables.
    bool use_system_env = 1;

    // sources is a list of files with env.
    repeated string sources = 2;
  }

  message Log {
    // enabled indicates whether to enable logging.
    bool enabled = 1;

    // path is the path to the log output file.
    string path = 2;

    // verbose is the verbosity level of the log.
    bool verbose = 3;
  }

  message Server {
    string address = 1;

    TLS tls = 2;

    message TLS {
      bool enabled = 1;
      string cert_file = 2;
      string key_file = 3;
    }
  }
}
